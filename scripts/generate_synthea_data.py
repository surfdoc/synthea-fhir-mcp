#!/usr/bin/env python3
"""
Generate synthetic patient data using Synthea.

This script automates the process of:
1. Checking Java installation
2. Downloading/updating Synthea
3. Generating synthetic FHIR data
4. Preparing data for PostgreSQL loading

Requirements:
    - Java 11 or higher
    - Python 3.8+
    - Git
"""

import argparse
import json
import os
import subprocess
import sys
import shutil
from pathlib import Path
from typing import Optional


def check_java():
    """Check if Java is installed and get version."""
    try:
        result = subprocess.run(
            ["java", "-version"],
            capture_output=True,
            text=True,
            check=False
        )

        # Java outputs version to stderr
        version_output = result.stderr
        if "version" in version_output.lower():
            print(f"‚úì Java found: {version_output.split()[2].strip('\"')}")

            # Check for minimum version (Java 11)
            version_parts = version_output.split('"')[1].split('.')
            major_version = int(version_parts[0]) if version_parts[0] != '1' else int(version_parts[1])

            if major_version < 11:
                print("‚ö†Ô∏è  Warning: Synthea requires Java 11 or higher")
                print("   Please upgrade Java before continuing")
                return False
            return True
        else:
            return False
    except (FileNotFoundError, IndexError, ValueError):
        return False


def ensure_synthea(synthea_dir: Path) -> bool:
    """Download or update Synthea."""
    if not synthea_dir.exists():
        print(f"üì• Cloning Synthea to {synthea_dir}...")
        try:
            subprocess.run([
                "git", "clone",
                "https://github.com/synthetichealth/synthea.git",
                str(synthea_dir)
            ], check=True)
            print("‚úì Synthea cloned successfully")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚úó Failed to clone Synthea: {e}")
            return False
    else:
        print(f"üì• Updating Synthea in {synthea_dir}...")
        try:
            subprocess.run(
                ["git", "pull"],
                cwd=synthea_dir,
                check=True
            )
            print("‚úì Synthea updated successfully")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  Failed to update Synthea: {e}")
            print("   Continuing with existing version...")
            return True


def configure_synthea(synthea_dir: Path, config_file: Optional[Path] = None) -> None:
    """Configure Synthea for FHIR generation."""
    properties_dir = synthea_dir / "src" / "main" / "resources"
    properties_file = properties_dir / "synthea.properties"

    # Default configuration optimized for our FHIR use case
    default_config = """# Synthea Configuration for FHIR Generation
# Generated by generate_synthea_data.py

# Export formats - only FHIR
exporter.fhir.export = true
exporter.fhir.use_us_core_ig = true
exporter.fhir.use_shr_extensions = false
exporter.fhir.transaction_bundle = true
exporter.fhir.bulk_data = false
exporter.csv.export = false
exporter.ccda.export = false
exporter.html.export = false

# Generate settings
generate.only_alive_patients = true
generate.max_attempts_to_keep_patient = 1000
generate.demographics.default_population = 100

# Years of history to generate
generate.years_of_history = 10

# Encounter settings
generate.default_encounter_module = encounters/wellness

# Provider settings
generate.providers.selection_behavior = random
"""

    # Use custom config if provided, otherwise use default
    if config_file and config_file.exists():
        print(f"üìù Using custom configuration from {config_file}")
        shutil.copy(config_file, properties_file)
    else:
        print(f"üìù Writing default configuration to {properties_file}")
        properties_dir.mkdir(parents=True, exist_ok=True)
        with open(properties_file, 'w') as f:
            f.write(default_config)


def build_synthea(synthea_dir: Path) -> bool:
    """Build Synthea using Gradle."""
    print("üî® Building Synthea (this may take a few minutes on first run)...")

    # Determine gradle wrapper command based on OS
    gradle_cmd = "./gradlew" if os.name != 'nt' else "gradlew.bat"
    gradle_path = synthea_dir / gradle_cmd

    if not gradle_path.exists():
        print(f"‚úó Gradle wrapper not found at {gradle_path}")
        return False

    try:
        # Make gradlew executable on Unix-like systems
        if os.name != 'nt':
            subprocess.run(["chmod", "+x", str(gradle_path)], check=True)

        # Build Synthea
        subprocess.run(
            [str(gradle_path), "build", "-x", "test"],
            cwd=synthea_dir,
            check=True
        )
        print("‚úì Synthea built successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó Failed to build Synthea: {e}")
        return False


def generate_data(
    synthea_dir: Path,
    output_dir: Path,
    population: int = 100,
    state: Optional[str] = None,
    city: Optional[str] = None,
    seed: Optional[int] = None,
    modules: Optional[list] = None
) -> bool:
    """Generate synthetic patient data.

    Args:
        synthea_dir: Path to Synthea installation
        output_dir: Directory for generated data
        population: Number of patients to generate
        state: US state (e.g., "Massachusetts")
        city: City name
        seed: Random seed for reproducibility
        modules: Specific modules to run (e.g., ["covid19", "diabetes"])
    """
    print(f"\nüè• Generating {population} synthetic patients...")

    # Create output directory
    output_dir.mkdir(parents=True, exist_ok=True)

    # Build Synthea command
    run_script = "./run_synthea" if os.name != 'nt' else "run_synthea.bat"
    run_path = synthea_dir / run_script

    if not run_path.exists():
        print(f"‚úó Synthea run script not found at {run_path}")
        return False

    cmd = [str(run_path)]

    # Population size
    cmd.extend(["-p", str(population)])

    # Output directory
    cmd.extend(["--exporter.baseDirectory", str(output_dir.absolute())])

    # Optional parameters
    if state:
        cmd.extend(["-s", state])
        print(f"  üìç State: {state}")
    if city:
        cmd.extend(["-t", city])
        print(f"  üèôÔ∏è  City: {city}")
    if seed is not None:
        cmd.extend(["--seed", str(seed)])
        print(f"  üé≤ Random seed: {seed}")
    if modules:
        print(f"  üì¶ Modules: {', '.join(modules)}")
        for module in modules:
            cmd.extend(["-m", module])

    try:
        # Run Synthea
        print(f"\nRunning command: {' '.join(cmd)}")
        result = subprocess.run(
            cmd,
            cwd=synthea_dir,
            capture_output=True,
            text=True
        )

        if result.returncode != 0:
            print(f"‚úó Synthea failed with exit code {result.returncode}")
            print(f"Error output: {result.stderr}")
            return False

        print("‚úì Data generation complete!")
        return True

    except subprocess.CalledProcessError as e:
        print(f"‚úó Failed to generate data: {e}")
        return False


def validate_output(output_dir: Path) -> bool:
    """Validate that FHIR data was generated."""
    fhir_dir = output_dir / "fhir"

    if not fhir_dir.exists():
        print(f"‚úó FHIR output directory not found: {fhir_dir}")
        return False

    bundle_files = list(fhir_dir.glob("*.json"))

    if not bundle_files:
        print(f"‚úó No FHIR bundles found in {fhir_dir}")
        return False

    print(f"\n‚úì Generated {len(bundle_files)} FHIR bundles in {fhir_dir}")

    # Sample one bundle to show resource types
    try:
        with open(bundle_files[0], 'r') as f:
            bundle = json.load(f)

        resource_types = {}
        for entry in bundle.get('entry', []):
            resource_type = entry.get('resource', {}).get('resourceType')
            if resource_type:
                resource_types[resource_type] = resource_types.get(resource_type, 0) + 1

        if resource_types:
            print("\nüìä Sample bundle contains:")
            for rtype, count in sorted(resource_types.items()):
                print(f"    ‚Ä¢ {rtype}: {count}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not analyze bundle structure: {e}")

    return True


def main():
    parser = argparse.ArgumentParser(
        description="Generate synthetic patient data using Synthea",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Generate 100 patients (default)
  %(prog)s

  # Generate 500 patients in Massachusetts
  %(prog)s --population 500 --state Massachusetts

  # Generate reproducible data with seed
  %(prog)s --population 200 --seed 12345

  # Generate patients with specific conditions
  %(prog)s --modules diabetes heart covid19
        """
    )
    parser.add_argument(
        "--synthea-dir",
        type=Path,
        default=Path("synthea"),
        help="Directory for Synthea installation (default: ./synthea)"
    )
    parser.add_argument(
        "--output-dir",
        type=Path,
        default=Path("synthea/output"),
        help="Output directory for generated data (default: ./synthea/output)"
    )
    parser.add_argument(
        "--population",
        type=int,
        default=100,
        help="Number of patients to generate (default: 100)"
    )
    parser.add_argument(
        "--state",
        help="US state (e.g., Massachusetts, California)"
    )
    parser.add_argument(
        "--city",
        help="City name (e.g., Boston, 'Los Angeles')"
    )
    parser.add_argument(
        "--seed",
        type=int,
        help="Random seed for reproducible data"
    )
    parser.add_argument(
        "--modules",
        nargs="+",
        help="Specific modules to run (e.g., covid19 diabetes heart)"
    )
    parser.add_argument(
        "--config",
        type=Path,
        help="Custom Synthea properties file"
    )
    parser.add_argument(
        "--skip-build",
        action="store_true",
        help="Skip building Synthea (use if already built)"
    )

    args = parser.parse_args()

    print("üè• Synthea FHIR Data Generator")
    print("=" * 40)

    # Check Java
    if not check_java():
        print("\n‚ùå Java not found or version too old!")
        print("\nPlease install Java 11 or higher:")
        print("  ‚Ä¢ macOS: brew install openjdk@11")
        print("  ‚Ä¢ Ubuntu: sudo apt-get install openjdk-11-jdk")
        print("  ‚Ä¢ Windows: Download from https://adoptium.net/")
        return 1

    # Ensure Git is available
    if shutil.which("git") is None:
        print("\n‚ùå Git not found!")
        print("Please install Git to download Synthea")
        return 1

    try:
        # Download/update Synthea
        if not ensure_synthea(args.synthea_dir):
            return 1

        # Configure Synthea
        configure_synthea(args.synthea_dir, args.config)

        # Build Synthea if needed
        if not args.skip_build:
            if not build_synthea(args.synthea_dir):
                return 1

        # Generate data
        if not generate_data(
            args.synthea_dir,
            args.output_dir,
            population=args.population,
            state=args.state,
            city=args.city,
            seed=args.seed,
            modules=args.modules
        ):
            return 1

        # Validate output
        if not validate_output(args.output_dir):
            return 1

        # Print next steps
        fhir_dir = args.output_dir / "fhir"
        print(f"\n‚úÖ Success! FHIR data ready in: {fhir_dir}")
        print(f"\nüìù Next steps:")
        print(f"1. Review generated data:")
        print(f"   ls -la {fhir_dir}")
        print(f"\n2. Load into PostgreSQL:")
        print(f"   python scripts/load_synthea_data.py --synthea-dir {args.output_dir}")

        return 0

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Generation interrupted by user")
        return 1
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())